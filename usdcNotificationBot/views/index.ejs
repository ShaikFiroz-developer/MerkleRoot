<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>USDC Transfer Tracker</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        #transactions::-webkit-scrollbar {
            width: 0;
            height: 0;
        }

        #transactions {
            overflow-y: auto;
            height: 50vh;
            padding-top: 10px;
            padding-bottom: 10px;
        }

        th,
        td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Column width styling */
        .col-from,
        .col-to {
            width: 15%;
        }

        .col-txhash {
            width: 25%;
        }

        .col-value,
        .col-timestamp {
            width: 20%;
        }

        /* Notification Icon */
        #notificationIcon {
            position: absolute;
            top: 20px;
            right: 20px;
            cursor: pointer;
        }

        #notificationBadge {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 10px;
            height: 10px;
            background-color: red;
            border-radius: 50%;
        }

        /* Notification Panel */
        #notificationPanel {
            position: fixed;
            top: 80px;
            right: 20px;
            width: 300px;
            max-height: 400px;
            background-color: white;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: none;
            overflow-y: auto;
            z-index: 1000;
        }
    </style>
</head>

<body class="bg-gray-100 max-h-screen flex items-center justify-center p-4 relative">

    <!-- Notification Icon -->
    <div id="notificationIcon" class="relative">
        <img src="https://img.icons8.com/ios-glyphs/30/000000/bell.png" alt="Notification Icon">
        <span id="notificationBadge" class="hidden"></span>
    </div>

    <!-- Notification Panel -->
    <div id="notificationPanel" class="p-4">
        <h2 class="text-lg font-semibold mb-2">New Transactions</h2>
        <div id="notificationContent" class="text-gray-700">No new transactions.</div>
    </div>

    <div class="w-full max-w-screen max-h-90vh bg-white shadow-md rounded-lg p-6 flex flex-col">
        <h1 class="text-3xl font-semibold text-gray-800 text-left mb-6">USDC Transfer Tracker</h1>

        <form id="addressForm" class="flex flex-col items-start mb-6">
            <label for="addressInput" class="block text-gray-700 font-medium mb-2">Enter Address to Monitor:</label>
            <input id="addressInput" name="address" type="text" placeholder="default monitering address is 0xa63cce06Adc521ef91a2DB2153dD75d336Cd0004 " required
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring focus:ring-blue-200 focus:outline-none">
            <button type="submit"
                class="mt-4 px-6 py-2 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition duration-300">Start
                Monitoring</button>
        </form>

        <p class="text-lg text-gray-700 font-medium text-left mb-4">Monitoring transfers to: <strong id="targetAddress"
                class="text-blue-600">Loading...</strong></p>

        <div id="transactions" class="w-full border border-gray-200 rounded-lg shadow-inner overflow-y-auto">
            <table class="w-full text-left table-fixed">
                <thead class="bg-gray-50 sticky top-0">
                    <tr>
                        <th class="px-2 py-2 col-from text-gray-700 font-semibold">From</th>
                        <th class="px-2 py-2 col-to text-gray-700 font-semibold">To</th>
                        <th class="px-2 py-2 col-txhash text-gray-700 font-semibold">Transaction Hash</th>
                        <th class="px-2 py-2 col-value text-gray-700 font-semibold">Value (USDC)</th>
                        <th class="px-2 py-2 col-timestamp text-gray-700 font-semibold">Timestamp</th>
                    </tr>
                </thead>
                <tbody id="transactionsBody" class="text-gray-700">
                    <tr>
                        <td colspan="5" class="px-4 py-2 text-left text-gray-600">Loading recent transactions updates
                            take one min...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        const ws = new WebSocket(`ws://${window.location.host}/updates`);
        const transactionsBody = document.getElementById("transactionsBody");
        const targetAddressSpan = document.getElementById("targetAddress");
        const addressForm = document.getElementById("addressForm");
        const addressInput = document.getElementById("addressInput");
        const notificationIcon = document.getElementById("notificationIcon");
        const notificationBadge = document.getElementById("notificationBadge");
        const notificationPanel = document.getElementById("notificationPanel");
        const notificationContent = document.getElementById("notificationContent");

        let previousTransactions = [];

        // Handle form submission
        addressForm.onsubmit = (event) => {
            event.preventDefault();
            const address = addressInput.value.trim();
            if (address) {
                fetch("/set-address", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ address })
                })
                    .then(response => {
                        if (response.ok) {
                            targetAddressSpan.textContent = address;
                            transactionsBody.innerHTML = "<tr><td colspan='5' class='px-4 py-2 text-left text-gray-600'>Loading recent transactions updates take one min...</td></tr>";
                            addressInput.value = '';
                        } else {
                            alert("Failed to set address. Please try again.");
                        }
                    })
                    .catch(error => console.error("Error:", error));
            }
        };

        // WebSocket message handling for transaction updates
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            const transactions = data.transfers;

            if (JSON.stringify(transactions) !== JSON.stringify(previousTransactions)) {
                previousTransactions = transactions;
                showNotification(transactions);
            }

            if (transactions.length > 0) {
                transactionsBody.innerHTML = transactions.map(tx => `
                    <tr class="bg-white hover:bg-gray-50">
                        <td class="px-2 py-2 col-from">${tx.from}</td>
                        <td class="px-2 py-2 col-to">${tx.to}</td>
                        <td class="px-2 py-2 col-txhash truncate">${tx.transactionHash}</td>
                        <td class="px-2 py-2 col-value">${parseFloat(tx.value).toFixed(4)}</td>
                        <td class="px-2 py-2 col-timestamp">${new Date(tx.blockTimestamp * 1000).toLocaleString()}</td>
                    </tr>
                `).join("");
            } else {
                transactionsBody.innerHTML = "<tr><td colspan='5' class='px-4 py-2 text-left text-gray-600'>No recent transactions found.</td></tr>";
            }
        };

        // Show notification badge and update notification panel
        function showNotification(transactions) {
            notificationBadge.classList.remove("hidden");
            notificationContent.innerHTML = transactions.length > 0
                ? transactions.map(tx => `
                    <div class="p-2 border-b border-gray-200">
                        <p><strong>From:</strong> ${tx.from}</p>
                        <p><strong>To:</strong> ${tx.to}</p>
                        <p><strong>Tx Hash:</strong> ${tx.transactionHash}</p>
                        <p><strong>Value:</strong> ${parseFloat(tx.value).toFixed(4)}</p>
                        <p><strong>Timestamp:</strong> ${new Date(tx.blockTimestamp * 1000).toLocaleString()}</p>
                    </div>
                `).join("")
                : "<p class='text-gray-600'>No new transactions.</p>";
        }

        // Toggle notification panel visibility
        notificationIcon.onclick = () => {
            notificationPanel.style.display = notificationPanel.style.display === "none" ? "block" : "none";
            notificationBadge.classList.add("hidden");  // Hide badge when panel is opened
        };
    </script>
</body>

</html>